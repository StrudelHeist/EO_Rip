@page "/battle"

@using EtrianOdysseyClone.Data
@using EtrianOdysseyClone.Data.Characters
@using EtrianOdysseyClone.Data.Enemies
@using EtrianOdysseyClone.Data.Skills 

<div class="bg-rocks h-screen">
    <!-- Battle information -->
    <div class="w-full bg-blue-500 p-2 opacity-90">
        <label class="text-gray-100 pl-1 text-lg">A horde of enemies has appeared!</label>
    </div>

    <div class="flex p-2">
        <!-- Menu -->
        <div class="grid gap-1 bg-yellow-100 p-1 rounded">
            <button @onclick="AttackClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Attack</button>
            <button @onclick="SkillClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Skill</button>
            <button @onclick="DefendClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Defend</button>
            <button @onclick="ItemClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Item</button>
            <button @onclick="RunClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Run</button>
        </div>


        <!-- Image View -->
        <div class="relative w-full h-64">
            <!-- Enemy lines -->
            <div class="pl-2 grid grid-cols-3 grid-rows-2">
                @for(int i = 0; i < 6; i++)
                {
                <button @onclick="() => EnemyClicked(EnemyLineIdx(i))" type="button" class="h-32 place-self-center">
                    @if(Enemies[EnemyLineIdx(i)] is not Placeholder)
                    {
                        <img class="h-32 @EnemySelectable()" src=@Enemies[EnemyLineIdx(i)].ImagePath />
                    }
                </button>
                }
            </div>

            <!-- Character Profile -->
            @if (ShowPortrait)
            {
            <div class="absolute right-0 inset-y-0">
                <img class="h-64" src=@SelectedMember.ImagePath />
            </div>
            }

            <!-- Skills menu -->
            @if (SkillMenuOpen)
            {
            <div class="absolute inset-y-0 left-3 bg-blue-600 opacity-90 rounded border-2 border-yellow-100">
                <div class="flex flex-col gap-1 p-2">
                    @foreach (var skill in SkillMenuSkills)
                    {
                    <button @onclick="() => SkillSelected(skill)" type="button" class="bg-blue-50 px-2">
                        <div class="flex justify-between">
                            <label class="text-blue-900 font-semibold">@skill.Name</label>
                            <label class="pl-2">@skill.TpCost</label>
                        </div>
                    </button>
                    }
                </div>
            </div>
            }
        </div>
    </div>

    <!-- Party Info -->
    <div class="grid grid-cols-3 grid-rows-2 gap-1 px-2">
        <!-- Front Line Position 1 -->
        <div class="@HighlightPartyMember(0)">
            <div class="bg-blue-700 rounded  flex flex-col justify-between">
                @if (Party.Members.ElementAt(0) != null)
                {
                <div class="flex justify-between">
                    <div class="text-blue-50 font-bold pl-2 lg:pl-5 text-lg">@Party.Members[0].Name</div>
                    <div class="flex">
                        <div class="text-blue-200 pr-2">Lv</div>
                        <div class="font-semibold text-blue-50 pr-2">@Party.Members[0].Level</div>
                    </div>
                </div>
                <div class="flex justify-between bg-black rounded-b">
                    <div class="flex">
                        <div class="pl-2 text-blue-200">HP</div>
                        <div class="pl-2 text-blue-50 font-semibold">@Party.Members[0].ActualHP/@Party.Members[0].BaseHP</div>
                    </div>
                    <div class="flex">
                        <div class="pr-2 text-blue-200">TP</div>
                        <div class="pr-2 text-blue-50 font-semibold">@Party.Members[0].ActualTP/@Party.Members[0].BaseTP</div>
                    </div>
                </div>
                }
            </div>
        </div>
        <!-- Front Line Position 2-->
        <div class="@HighlightPartyMember(1)">
            <div class="bg-blue-700 rounded flex flex-col justify-between">
                @if (Party.Members.ElementAt(1) != null)
                {
                <div class="flex justify-between">
                    <div class="flex">
                        <div class="text-blue-200 pl-2">Lv</div>
                        <div class="font-semibold text-blue-50 pl-2">@Party.Members[1].Level</div>
                    </div>
                    <div class="text-blue-50 font-bold pr-2 lg:pr-5 text-lg">@Party.Members[1].Name</div>
                </div>
                <div class="flex justify-between bg-black rounded-b">
                    <div class="flex">
                        <div class="pl-2 text-blue-200">HP</div>
                        <div class="pl-2 text-blue-50 font-semibold">@Party.Members[1].ActualHP/@Party.Members[1].BaseHP</div>
                    </div>
                    <div class="flex">
                        <div class="pr-2 text-blue-200">TP</div>
                        <div class="pr-2 text-blue-50 font-semibold">@Party.Members[1].ActualTP/@Party.Members[1].BaseTP</div>
                    </div>
                </div>
                }
            </div>
        </div>
        <div class="p-1">
            <div class="bg-blue-700 rounded flex flex-col justify-between">
            </div>
        </div>
        <div class="p-1">
            <div class="bg-blue-700 rounded flex flex-col justify-between">
            </div>
        </div>
        <div class="p-1">
            <div class="bg-blue-700 rounded flex flex-col justify-between">
            </div>
        </div>
        <div class="p-1">
            <div class="bg-blue-700 rounded flex flex-col justify-between">
            </div>
        </div>
    </div>
</div>

@code {
    public enum BattleState
    {
        ACTION_SELECTION,
        CONFIRM,
        BATTLING
    }

    public Party Party { get; private set; } // Get this from GameSession when we actually implement this
    public List<Enemy> Enemies { get; private set; } // This should be randomly generated to include floor appropriate enemies

    public List<BattleAction> BattleActions { get; private set; }

    public bool SkillMenuOpen { get; private set; }
    public bool ShowPortrait { get; private set; }
    public PartyMember SelectedMember
    {
        get
        {
            return Party.Members[CurrentMemberIdx];
        }
    }
    public int CurrentMemberIdx { get; private set; }
    public BattleState State { get; private set; }
    public List<ISkill> SkillMenuSkills { get; private set; }

    protected override void OnInitialized()
    {
        Party = new Party();
        Party.Members.Add(new Braven(0));
        Party.Members.Add(new Brian(1));

        Enemies = new List<Enemy>();
        Enemies.Add(new FatChicken(0));
        Enemies.Add(new FatChicken(1));
        Enemies.Add(new Placeholder());
        Enemies.Add(new Placeholder());
        Enemies.Add(new Placeholder());
        Enemies.Add(new Placeholder());

        SkillMenuSkills = new List<ISkill>();
        BattleActions = new List<BattleAction>();

        SkillMenuOpen = false;
        CurrentMemberIdx = 0;
        State = BattleState.ACTION_SELECTION;
        ShowPortrait = true;

        base.OnInitialized();
    }

    public void AttackClicked()
    {
        // TODO: Have user click on enemy to attack
        ShowPortrait = false;
    }
    public void SkillClicked()
    {
        // Have user choose a skill
        SkillMenuSkills.Clear();
        foreach (ISkill skill in SelectedMember.Job.Skills)
            SkillMenuSkills.Add(skill);
        SkillMenuOpen = true;

    }
    public void DefendClicked()
    {
        // TODO: Add a defense buff to party member
    }
    public void ItemClicked()
    {
        // TODO: Pull up an item menu
    }
    public void RunClicked()
    {
        // TODO: Handle run/escape logic
    }

    public void EnemyClicked(int idx)
    {
        // Ignore enemy clicks unless we're selecting them
        if (ShowPortrait)
            return;

        // TODO: Set target enemy for party member and continue
        BattleActions.Add(new BattleAction()
        {
            ActionSpeed = Party.Members[CurrentMemberIdx].ActualSpeed,
            ActualAction = () =>
            {
                ITarget target = Enemies[idx];
                ICaster member = Party.Members[CurrentMemberIdx];

                int damage = member.ActualStrength - target.ActualDefense;
                if (damage > 0)
                {
                    target.ActualHP -= damage;
                }
            },
            ActionInformation = $"{Party.Members[CurrentMemberIdx].Name} attacks {Enemies[idx].Name}"
        });

        // Move to next party member
        ShowPortrait = true;
        // --> If no party members left, then confirm turn end
        if (CurrentMemberIdx + 1 >= Party.Members.Count)
        {
            State = BattleState.CONFIRM;
            return;
        }
        else
            CurrentMemberIdx += 1;

    }
    public void SkillSelected(ISkill skill)
    {
        // Pick target for skill depending on skill type

        BattleActions.Add(new BattleAction()
        {
            ActionSpeed = Party.Members[CurrentMemberIdx].ActualSpeed,
            ActualAction = () =>
            {
                //skill.ExecuteSkill(Party.Members[CurrentMemberIdx], )
            },
            ActionInformation = $"{Party.Members[CurrentMemberIdx].Name} uses {skill.Name}"
        });

        SkillMenuOpen = false;
        if (CurrentMemberIdx + 1 >= Party.Members.Count)
        {
            State = BattleState.CONFIRM;
            return;
        }
        else
            CurrentMemberIdx += 1;
    }

    private void BattleSequence()
    {
        // Go through actions organized by speed

        // Show information on the top bar
    }

    private string HighlightPartyMember(int idx)
    {
        if (Party.Members[idx] == SelectedMember)
            return "bg-yellow-300 rounded p-1";
        else
            return "p-1";
    }
    private int EnemyLineIdx(int idx)
    {
        return (idx + 3) % 6;
    }
    private string EnemySelectable()
    {
        if (ShowPortrait)
            return "";
        else
            return "hover:bg-yellow-300 rounded";
    }
}
