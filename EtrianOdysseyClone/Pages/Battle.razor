@page "/battle"

@using EtrianOdysseyClone.Data
@using EtrianOdysseyClone.Data.Characters
@using EtrianOdysseyClone.Data.Enemies
@using EtrianOdysseyClone.Data.Skills 

<div class="bg-rocks h-screen">
    <!-- Battle information -->
    <div class="w-full bg-blue-500 p-2 opacity-90">
        <label class="text-gray-100 pl-1 text-lg">@Text</label>
    </div>

    <div class="flex p-2">
        <!-- Menu -->
        <div class="grid gap-1 bg-yellow-100 p-1 rounded">
            <button @onclick="AttackClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Attack</button>
            <button @onclick="SkillClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Skill</button>
            <button @onclick="DefendClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Defend</button>
            <button @onclick="ItemClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Item</button>
            <button @onclick="RunClicked" type="button" class="bg-blue-600 hover:bg-blue-800 text-blue-50 font-semibold text-xl px-2">Run</button>
        </div>


        <!-- Image View -->
        <div class="relative w-full h-64">
            <!-- Enemy lines -->
            <div class="pl-2 grid grid-cols-3 grid-rows-2">
                <button @onclick="() => EnemyClicked(Enemies.GetAtPosition(FormationPosition.BACK_0))" type="button" class="relative h-32 place-self-center">
                    @if (Enemies.GetAtPosition(FormationPosition.BACK_0) is not null)
                    {
                        <img class="h-32 @EnemySelectable()" src=@Enemies.GetAtPosition(FormationPosition.BACK_0).ImagePath />
                        <div class="absolute inset-x-0 bottom-0 bg-white opacity-80 flex justify-center">
                            <div class="pr-1">HP</div>
                            <div class="font-semibold">@Enemies.GetAtPosition(FormationPosition.BACK_0).ActualHP/@Enemies.GetAtPosition(FormationPosition.BACK_0).BaseHP</div>
                        </div>
                    }
                </button>
                <button @onclick="() => EnemyClicked(Enemies.GetAtPosition(FormationPosition.BACK_1))" type="button" class="relative h-32 place-self-center">
                    @if (Enemies.GetAtPosition(FormationPosition.BACK_1) is not null)
                    {
                        <img class="h-32 @EnemySelectable()" src=@Enemies.GetAtPosition(FormationPosition.BACK_1).ImagePath />
                        <div class="absolute inset-x-0 bottom-0 bg-white opacity-80 flex justify-center">
                            <div class="pr-1">HP</div>
                            <div class="font-semibold">@Enemies.GetAtPosition(FormationPosition.BACK_1).ActualHP/@Enemies.GetAtPosition(FormationPosition.BACK_1).BaseHP</div>
                        </div>
                    }
                </button>
                <button @onclick="() => EnemyClicked(Enemies.GetAtPosition(FormationPosition.BACK_2))" type="button" class="relative h-32 place-self-center">
                    @if (Enemies.GetAtPosition(FormationPosition.BACK_2) is not null)
                    {
                        <img class="h-32 @EnemySelectable()" src=@Enemies.GetAtPosition(FormationPosition.BACK_2).ImagePath />
                        <div class="absolute inset-x-0 bottom-0 bg-white opacity-80 flex justify-center">
                            <div class="pr-1">HP</div>
                            <div class="font-semibold">@Enemies.GetAtPosition(FormationPosition.BACK_2).ActualHP/@Enemies.GetAtPosition(FormationPosition.BACK_2).BaseHP</div>
                        </div>
                    }
                </button>
                <button @onclick="() => EnemyClicked(Enemies.GetAtPosition(FormationPosition.FRONT_0))" type="button" class="relative h-32 place-self-center">
                    @if (Enemies.GetAtPosition(FormationPosition.FRONT_0) is not null)
                    {
                        <img class="h-32 @EnemySelectable()" src=@Enemies.GetAtPosition(FormationPosition.FRONT_0).ImagePath />
                        <div class="absolute inset-x-0 bottom-0 bg-white opacity-80 flex justify-center">
                            <div class="pr-1">HP</div>
                            <div class="font-semibold">@Enemies.GetAtPosition(FormationPosition.FRONT_0).ActualHP/@Enemies.GetAtPosition(FormationPosition.FRONT_0).BaseHP</div>
                        </div>
                    }
                </button>
                <button @onclick="() => EnemyClicked(Enemies.GetAtPosition(FormationPosition.FRONT_1))" type="button" class="relative h-32 place-self-center">
                    @if (Enemies.GetAtPosition(FormationPosition.FRONT_1) is not null)
                    {
                        <img class="h-32 @EnemySelectable()" src=@Enemies.GetAtPosition(FormationPosition.FRONT_1).ImagePath />
                        <div class="absolute inset-x-0 bottom-0 bg-white opacity-80 flex justify-center">
                            <div class="pr-1">HP</div>
                            <div class="font-semibold">@Enemies.GetAtPosition(FormationPosition.FRONT_1).ActualHP/@Enemies.GetAtPosition(FormationPosition.FRONT_1).BaseHP</div>
                        </div>
                    }
                </button>
                <button @onclick="() => EnemyClicked(Enemies.GetAtPosition(FormationPosition.FRONT_2))" type="button" class="relative h-32 place-self-center">
                    @if (Enemies.GetAtPosition(FormationPosition.FRONT_2) is not null)
                    {
                        <img class="h-32 @EnemySelectable()" src=@Enemies.GetAtPosition(FormationPosition.FRONT_2).ImagePath />
                        <div class="absolute inset-x-0 bottom-0 bg-white opacity-80 flex justify-center">
                            <div class="pr-1">HP</div>
                            <div class="font-semibold">@Enemies.GetAtPosition(FormationPosition.FRONT_2).ActualHP/@Enemies.GetAtPosition(FormationPosition.FRONT_2).BaseHP</div>
                        </div>
                    }
                </button>
            </div>

            <!-- Character Profile -->
            @if (ShowPortrait)
            {
                <div class="absolute right-0 inset-y-0">
                    <img class="h-64" src=@SelectedMember.ImagePath />
                </div>
            }

            <!-- Skills menu -->
            @if (ShowSkillMenu)
            {
                <div class="absolute inset-y-0 left-3 bg-blue-600 opacity-90 rounded border-2 border-yellow-100">
                    <div class="flex flex-col gap-1 p-2">
                        @foreach (var skill in SkillMenuSkills)
                        {
                            <button @onclick="() => SkillSelected(skill)" type="button" class="bg-blue-50 px-2 hover:bg-blue-200">
                                <div class="grid grid-cols-2">
                                    <div class="text-left text-blue-900 font-semibold">@skill.Name</div>
                                    <div class="text-right">@skill.TpCost</div>
                                </div>
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Party Info -->
    <div class="grid grid-cols-3 grid-rows-2 gap-1 px-2">
        <button type="button" @onclick="() => PartyMemberClicked(FormationPosition.FRONT_0)" class="@PartyMemberBackground(0)">
            <div class="bg-blue-700 rounded  flex flex-col justify-between">
                @if (Party.GetAtPosition(FormationPosition.FRONT_0) != null)
                {
                    <div class="flex justify-between">
                        <div class="text-blue-50 font-bold pl-2 lg:pl-5 text-lg">@Party.GetAtPosition(FormationPosition.FRONT_0).Name</div>
                        <div class="flex">
                            <div class="text-blue-200 pr-2">Lv</div>
                            <div class="font-semibold text-blue-50 pr-2">@Party.GetAtPosition(FormationPosition.FRONT_0).Level</div>
                        </div>
                    </div>
                    <div class="flex justify-between bg-black rounded-b">
                        <div class="flex">
                            <div class="pl-2 text-blue-200">HP</div>
                            <div class="pl-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.FRONT_0).ActualHP/@Party.GetAtPosition(FormationPosition.FRONT_0).BaseHP</div>
                        </div>
                        <div class="flex">
                            <div class="pr-2 text-blue-200">TP</div>
                            <div class="pr-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.FRONT_0).ActualTP/@Party.GetAtPosition(FormationPosition.FRONT_0).BaseTP</div>
                        </div>
                    </div>
                }
            </div>
        </button>
        <button type="button" @onclick="() => PartyMemberClicked(FormationPosition.FRONT_1)" class="@PartyMemberBackground(1)">
            <div class="bg-blue-700 rounded  flex flex-col justify-between">
                @if (Party.GetAtPosition(FormationPosition.FRONT_1) != null)
                {
                    <div class="flex justify-between">
                        <div class="text-blue-50 font-bold pl-2 lg:pl-5 text-lg">@Party.GetAtPosition(FormationPosition.FRONT_1).Name</div>
                        <div class="flex">
                            <div class="text-blue-200 pr-2">Lv</div>
                            <div class="font-semibold text-blue-50 pr-2">@Party.GetAtPosition(FormationPosition.FRONT_1).Level</div>
                        </div>
                    </div>
                    <div class="flex justify-between bg-black rounded-b">
                        <div class="flex">
                            <div class="pl-2 text-blue-200">HP</div>
                            <div class="pl-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.FRONT_1).ActualHP/@Party.GetAtPosition(FormationPosition.FRONT_1).BaseHP</div>
                        </div>
                        <div class="flex">
                            <div class="pr-2 text-blue-200">TP</div>
                            <div class="pr-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.FRONT_1).ActualTP/@Party.GetAtPosition(FormationPosition.FRONT_1).BaseTP</div>
                        </div>
                    </div>
                }
            </div>
        </button>
        <button type="button" @onclick="() => PartyMemberClicked(FormationPosition.FRONT_2)" class="@PartyMemberBackground(2)">
            <div class="bg-blue-700 rounded  flex flex-col justify-between">
                @if (Party.GetAtPosition(FormationPosition.FRONT_2) != null)
                {
                    <div class="flex justify-between">
                        <div class="text-blue-50 font-bold pl-2 lg:pl-5 text-lg">@Party.GetAtPosition(FormationPosition.FRONT_2).Name</div>
                        <div class="flex">
                            <div class="text-blue-200 pr-2">Lv</div>
                            <div class="font-semibold text-blue-50 pr-2">@Party.GetAtPosition(FormationPosition.FRONT_2).Level</div>
                        </div>
                    </div>
                    <div class="flex justify-between bg-black rounded-b">
                        <div class="flex">
                            <div class="pl-2 text-blue-200">HP</div>
                            <div class="pl-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.FRONT_2).ActualHP/@Party.GetAtPosition(FormationPosition.FRONT_2).BaseHP</div>
                        </div>
                        <div class="flex">
                            <div class="pr-2 text-blue-200">TP</div>
                            <div class="pr-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.FRONT_2).ActualTP/@Party.GetAtPosition(FormationPosition.FRONT_2).BaseTP</div>
                        </div>
                    </div>
                }
            </div>
        </button>
        <button type="button" @onclick="() => PartyMemberClicked(FormationPosition.BACK_0)" class="@PartyMemberBackground(3)">
            <div class="bg-blue-700 rounded  flex flex-col justify-between">
                @if (Party.GetAtPosition(FormationPosition.BACK_0) != null)
                {
                    <div class="flex justify-between">
                        <div class="text-blue-50 font-bold pl-2 lg:pl-5 text-lg">@Party.GetAtPosition(FormationPosition.BACK_0).Name</div>
                        <div class="flex">
                            <div class="text-blue-200 pr-2">Lv</div>
                            <div class="font-semibold text-blue-50 pr-2">@Party.GetAtPosition(FormationPosition.BACK_0).Level</div>
                        </div>
                    </div>
                    <div class="flex justify-between bg-black rounded-b">
                        <div class="flex">
                            <div class="pl-2 text-blue-200">HP</div>
                            <div class="pl-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.BACK_0).ActualHP/@Party.GetAtPosition(FormationPosition.BACK_0).BaseHP</div>
                        </div>
                        <div class="flex">
                            <div class="pr-2 text-blue-200">TP</div>
                            <div class="pr-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.BACK_0).ActualTP/@Party.GetAtPosition(FormationPosition.BACK_0).BaseTP</div>
                        </div>
                    </div>
                }
            </div>
        </button>
        <button type="button" @onclick="() => PartyMemberClicked(FormationPosition.BACK_1)" class="@PartyMemberBackground(4)">
            <div class="bg-blue-700 rounded  flex flex-col justify-between">
                @if (Party.GetAtPosition(FormationPosition.BACK_1) != null)
                {
                    <div class="flex justify-between">
                        <div class="text-blue-50 font-bold pl-2 lg:pl-5 text-lg">@Party.GetAtPosition(FormationPosition.BACK_1).Name</div>
                        <div class="flex">
                            <div class="text-blue-200 pr-2">Lv</div>
                            <div class="font-semibold text-blue-50 pr-2">@Party.GetAtPosition(FormationPosition.BACK_1).Level</div>
                        </div>
                    </div>
                    <div class="flex justify-between bg-black rounded-b">
                        <div class="flex">
                            <div class="pl-2 text-blue-200">HP</div>
                            <div class="pl-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.BACK_1).ActualHP/@Party.GetAtPosition(FormationPosition.BACK_1).BaseHP</div>
                        </div>
                        <div class="flex">
                            <div class="pr-2 text-blue-200">TP</div>
                            <div class="pr-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.BACK_1).ActualTP/@Party.GetAtPosition(FormationPosition.BACK_1).BaseTP</div>
                        </div>
                    </div>
                }
            </div>
        </button>
        <button type="button" @onclick="() => PartyMemberClicked(FormationPosition.BACK_2)" class="@PartyMemberBackground(5)">
            <div class="bg-blue-700 rounded  flex flex-col justify-between">
                @if (Party.GetAtPosition(FormationPosition.BACK_2) != null)
                {
                    <div class="flex justify-between">
                        <div class="text-blue-50 font-bold pl-2 lg:pl-5 text-lg">@Party.GetAtPosition(FormationPosition.BACK_2).Name</div>
                        <div class="flex">
                            <div class="text-blue-200 pr-2">Lv</div>
                            <div class="font-semibold text-blue-50 pr-2">@Party.GetAtPosition(FormationPosition.BACK_2).Level</div>
                        </div>
                    </div>
                    <div class="flex justify-between bg-black rounded-b">
                        <div class="flex">
                            <div class="pl-2 text-blue-200">HP</div>
                            <div class="pl-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.BACK_2).ActualHP/@Party.GetAtPosition(FormationPosition.BACK_2).BaseHP</div>
                        </div>
                        <div class="flex">
                            <div class="pr-2 text-blue-200">TP</div>
                            <div class="pr-2 text-blue-50 font-semibold">@Party.GetAtPosition(FormationPosition.BACK_2).ActualTP/@Party.GetAtPosition(FormationPosition.BACK_2).BaseTP</div>
                        </div>
                    </div>
                }
            </div>
        </button>
    </div>
</div>

@code {
    private Random _random;
    private ISkill _lastSelectedSkill;
    private BattleState _currentState;

    public Party Party { get; private set; } // Get this from GameSession when we actually implement this
    public Horde Enemies { get; private set; } // This should be randomly generated to include floor appropriate enemies

    public List<BattleAction> BattleActions { get; private set; }

    public string Text { get; private set; }
    public bool ShowSkillMenu
    {
        get
        {
            return _currentState == BattleState.MEMBER_SELECT_SKILL;
        }
    }
    public bool ShowPortrait {
        get
        {
            switch (_currentState)
            {
                case BattleState.MEMBER_SELECT_ACTION:
                    return true;
                case BattleState.MEMBER_SELECT_SKILL:
                    return true;
                case BattleState.SELECT_TARGET_SINGLE:
                    return false;
                case BattleState.SELECT_TARGET_LINE:
                    return false;
                case BattleState.BATTLE_TIME:
                    return false;
                case BattleState.SELECT_MEMBER_SINGLE:
                    return false;
                case BattleState.SELECT_MEMBER_LINE:
                    return false;
                default:
                    return true;
            }
        }
    }
    public PartyMember SelectedMember
    {
        get
        {
            return Party.AllMembers[(int)CurrentPartyPosition];
        }
    }
    public FormationPosition CurrentPartyPosition { get; private set; }
    public List<ISkill> SkillMenuSkills { get; private set; }

    protected override void OnInitialized()
    {
        _random = new Random();
        _currentState = BattleState.MEMBER_SELECT_ACTION;

        Text = "A horde of enemies has appeared!";

        Party = new Party();
        Party.AddPartyMember(new Braven(0), FormationPosition.FRONT_0);
        Party.AddPartyMember(new Brian(1), FormationPosition.FRONT_1);

        Enemies = new Horde();
        Enemies.AddEnemy(new FatChicken(0), FormationPosition.FRONT_0);
        Enemies.AddEnemy(new FatChicken(1), FormationPosition.FRONT_1);

        SkillMenuSkills = new List<ISkill>();
        BattleActions = new List<BattleAction>();

        CurrentPartyPosition = FormationPosition.FRONT_0;

        base.OnInitialized();
    }

    public void AttackClicked()
    {
        // TODO: Have user click on enemy to attack
        Text = "Select an enemy to attack";
        _currentState = BattleState.SELECT_TARGET_SINGLE;
    }
    public void SkillClicked()
    {
        // Have user choose a skill
        SkillMenuSkills.Clear();
        if (SelectedMember.Job.Skills != null)
            foreach (ISkill skill in SelectedMember.Job.Skills)
                SkillMenuSkills.Add(skill);

        _currentState = BattleState.MEMBER_SELECT_SKILL;
    }
    public async void DefendClicked()
    {
        // Add a defense buff to party member
        BattleActions.Add(new BattleAction()
        {
            ActionSpeed = 0,
            ActualAction = () =>
            {
                SelectedMember.Buffs.Add(new Buff()
                {
                    DefenseModifier = 5
                });
            },
            ActionInformation = $"{SelectedMember.Name} is defending"
        });

        await AdvanceTurn();
    }
    public void ItemClicked()
    {
        // TODO: Pull up an item menu
    }
    public void RunClicked()
    {
        // TODO: Handle run/escape logic
    }

    public async void EnemyClicked(Enemy targetEnemy)
    {
        // Ignore enemy clicks unless we're selecting them
        if (_currentState != BattleState.SELECT_TARGET_SINGLE)
            return;

        // Set target enemy for party member and continue
        BattleAction bAction = new BattleAction();
        PartyMember caster = SelectedMember;
        bAction.ActionSpeed = caster.ActualSpeed;
        if (_lastSelectedSkill != null)
        {
            var tempSkill = _lastSelectedSkill;
            bAction.ActualAction = () =>
            {
                Console.WriteLine($"{caster.Name} is using {tempSkill.Name} which costs {tempSkill.TpCost} TP");
                Console.WriteLine($"{caster.Name}'s ActualTP is {caster.ActualTP}");
                caster.ActualTP -= tempSkill.TpCost;
                Console.WriteLine($"Now {caster.Name}'s ActualTP is {caster.ActualTP}");
                tempSkill.ExecuteSkill(caster, new List<ITarget>() { targetEnemy });
            };
            bAction.ActionInformation = $"{caster.Name} uses {tempSkill.Name} on {targetEnemy.Name}";
            _lastSelectedSkill = null;
        }
        else
        {
            bAction.ActualAction = () =>
            {
                int damage = caster.ActualStrength - targetEnemy.ActualDefense;
                if (damage > 0)
                {
                    targetEnemy.ActualHP -= damage;
                }
            };
            bAction.ActionInformation = $"{caster.Name} attacks {targetEnemy.Name}";
        }
        BattleActions.Add(bAction);

        await AdvanceTurn();
    }
    public async void SkillSelected(ISkill skill)
    {
        // Do different things depending on skill type
        if (skill.TargetType == TargetType.SELF)
        {
            PartyMember member = SelectedMember;
            BattleActions.Add(new BattleAction()
            {
                ActionInformation = $"{member.Name} uses {skill.Name}",
                ActualAction = () => {
                    Console.WriteLine($"{member.Name} is using {skill.Name} which costs {skill.TpCost} TP");
                    Console.WriteLine($"{member.Name}'s ActualTP is {member.ActualTP}");
                    member.ActualTP -= skill.TpCost;
                    Console.WriteLine($"Now {member.Name}'s ActualTP is {member.ActualTP}");
                    skill.ExecuteSkill(member, null);
                },
                ActionSpeed = SelectedMember.ActualSpeed
            });

            await AdvanceTurn();
        }
        else if (skill.TargetType == TargetType.ENEMY)
        {
            // Pick party member for skill
            _lastSelectedSkill = skill;
            _currentState = BattleState.SELECT_TARGET_SINGLE;
        }
        else if (skill.TargetType == TargetType.PARTY_MEMBER)
        {
            // TODO: Pick party member for skill
            _lastSelectedSkill = skill;
            _currentState = BattleState.SELECT_MEMBER_SINGLE;
        }
    }
    public async void PartyMemberClicked(FormationPosition position)
    {
        // Ignore clicks unless we're selecting a party member
        if (_currentState != BattleState.SELECT_MEMBER_SINGLE)
            return;

        // Set target party member for action and continue
        PartyMember caster = SelectedMember;
        PartyMember target = Party.GetAtPosition(position);
        ISkill skill = _lastSelectedSkill;
        BattleActions.Add(new BattleAction()
        {
            ActionInformation = $"{caster.Name} uses {skill.Name} on {target.Name}",
            ActualAction = () =>
            {
                Console.WriteLine($"{caster.Name} is using {skill.Name} which costs {skill.TpCost} TP");
                Console.WriteLine($"{caster.Name}'s ActualTP is {caster.ActualTP}");
                caster.ActualTP -= skill.TpCost;
                Console.WriteLine($"Now {caster.Name}'s ActualTP is {caster.ActualTP}");
                skill.ExecuteSkill(caster, new List<ITarget>() { target });
            },
            ActionSpeed = caster.ActualSpeed
        });
        _lastSelectedSkill = null;

        await AdvanceTurn();
    }

    private async Task BattleSequence()
    {
        // Sort battle actions by speed
        BattleActions.Sort((BattleAction a, BattleAction b) =>
        {
            return a.ActionSpeed.CompareTo(b.ActionSpeed) * -1; // -1 reverses list order
        });

        // Go through actions
        foreach(BattleAction bAction in BattleActions)
        {
            Text = bAction.ActionInformation;
            bAction.ActualAction();
            StateHasChanged();

            // TODO: Wait for advance action
            await Task.Delay(1500);
        }

        // Clear all battle actions
        BattleActions.Clear();
    }

    private string PartyMemberBackground(int idx)
    {
        if (Party.AllMembers[idx] == null)
            return "p-1 rounded";

        if (_currentState == BattleState.SELECT_MEMBER_SINGLE)
            return "p-1 rounded hover:bg-green-100";

        if (Party.AllMembers[idx] == SelectedMember)
            return "p-1 rounded bg-yellow-300";
        else
            return "p-1 rounded";
    }
    private int EnemyLineIdx(int idx)
    {
        return (idx + 3) % 6;
    }
    private string GetLinePositionName(int idx)
    {
        return ((FormationPosition)EnemyLineIdx(idx)).ToString();
    }
    private string EnemySelectable()
    {
        if (_currentState == BattleState.SELECT_TARGET_SINGLE)
            return "hover:bg-yellow-300 rounded";
        else
            return "";
    }

    private async Task AdvanceTurn()
    {
        // Execute battle sequence
        if (CurrentPartyPosition == Party.FinalPosition)
        {
            _currentState = BattleState.BATTLE_TIME;

            // TODO: Confirm before battle sequence

            // Add enemy actions
            for (int i = 0; i < 6; i++)
            {
                int i2 = i;
                if (Enemies.AllEnemies[i2] == null)
                    continue;

                int randomPartyIdx = _random.Next() % Party.Count;
                BattleActions.Add(new BattleAction()
                {
                    ActionSpeed = Enemies.AllEnemies[i2].ActualSpeed,
                    ActualAction = () =>
                    {
                        int damage = Enemies.AllEnemies[i2].ActualStrength - Party.GetAtRelativePosition(randomPartyIdx).ActualDefense;
                        if (damage > 0)
                            Party.GetAtRelativePosition(randomPartyIdx).ActualHP -= damage;
                    },
                    ActionInformation = $"{Enemies.AllEnemies[i2].Name} attacks {Party.GetAtRelativePosition(randomPartyIdx).Name}"
                });
            }

            await BattleSequence();
        }

        Text = "A horde of enemies has appeared";
        _currentState = BattleState.MEMBER_SELECT_ACTION;
        AdvancePartyPosition();

        StateHasChanged();
    }
    private void AdvancePartyPosition()
    {
        int nextPosition = (int)CurrentPartyPosition;

        do
        {
            nextPosition++;
            if (nextPosition > 5)
                nextPosition = 0;
        }
        while (Party.AllMembers[nextPosition] == null);

        CurrentPartyPosition = (FormationPosition)nextPosition;
    }
}
